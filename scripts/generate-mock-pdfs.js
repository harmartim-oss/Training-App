/**
 * generate-mock-pdfs.js - Mock PDF Generator for Demo
 * This creates mock PDFs to demonstrate the enhanced system
 */

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const resourcesDir = path.join(__dirname, '..', 'public', 'resources');

// Mock PDF content for demonstration
const generateMockPdf = async (inputPath, outputPath, tier) => {
  const fileName = path.basename(inputPath, '.md');
  const content = await fs.readFile(inputPath, 'utf8');
  
  // Create a mock PDF placeholder
  const mockPdfContent = `%PDF-1.4
%Mock PDF for demonstration
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources 5 0 R
>>
endobj

4 0 obj
<<
/Length 180
>>
stream
BT
/F1 24 Tf
50 750 Td
(${fileName} - ${tier.toUpperCase()} TIER) Tj
/F1 12 Tf
50 720 Td
(Professional PDF Generated by ODDI) Tj
50 700 Td
(Ontario Digital Defence Institute) Tj
50 680 Td
(Enhanced styling and premium content) Tj
50 660 Td
(Tier: ${tier}) Tj
ET
endstream
endobj

5 0 obj
<<
/Font <<
/F1 <<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
>>
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000225 00000 n 
0000000456 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
566
%%EOF`;

  await fs.writeFile(outputPath, mockPdfContent);
};

(async () => {
  try {
    await fs.ensureDir(resourcesDir);
    const entries = await fs.readdir(resourcesDir);
    const mdFiles = entries.filter(f => f.toLowerCase().endsWith('.md'));
    
    if (mdFiles.length === 0) {
      console.log('No markdown files found in', resourcesDir);
      process.exit(0);
    }

    console.log('üé® Generating mock professional PDFs for demonstration...\n');

    for (const f of mdFiles) {
      const input = path.join(resourcesDir, f);
      
      // Generate different tiers of PDFs
      const tiers = ['basic', 'professional', 'enterprise'];
      
      for (const tier of tiers) {
        const output = path.join(resourcesDir, f.replace(/\.md$/i, `_${tier}.pdf`));
        console.log(`üìÑ Creating ${tier.toUpperCase()} PDF for ${f}...`);
        await generateMockPdf(input, output, tier);
        console.log(`‚úÖ Generated: ${output}`);
      }
    }
    
    console.log('\nüéâ Mock PDF generation complete!');
    console.log('üìä Generated tiers: Basic, Professional, Enterprise');
    console.log('üíº In production, these would be fully styled professional PDFs');
    
  } catch (err) {
    console.error('‚ùå Error generating mock PDFs:', err);
    process.exit(1);
  }
})();